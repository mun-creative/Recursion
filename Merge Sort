

class Solution
{
    void merge(int arr[], int l, int m, int r)
    {
         // Your code here
         //create Left and Right array and fill them
         int n1=m-l+1;
         int n2=r-(m+1)+1;
         int [] L=new int[n1];
         int [] R=new int[n2];
         int k=l;
         //fill L
         for(int i=0;i<n1;i++)
         {
             L[i]=arr[k++];
             
         }
         
         //fill R
         for(int j=0;j<n2;j++)
         {
             R[j]=arr[k++];
             
         }
         
         int i=0,j=0;
         k=l;
         
         // put L and R in arr merge
         while(i<n1 && j<n2)
         {
             if(L[i]<=R[j])
             {
                 arr[k]=L[i];
                 i++;
             }
             else
             {
                 arr[k]=R[j];
                 j++;
             }
             k++;
         }
         
         //check for leftover L
         while(i<n1)
         {
             arr[k]=L[i];
             i++;
             k++;
         }
         
         //check for leftover R
          while(j<n2)
         {
             arr[k]=R[j];
             j++;
             k++;
         }
    }
    void mergeSort(int arr[], int l, int r)
    {
        //code here
        if(l>=r)
        return;
        
        int mid=l+(r-l)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
        
    }
}
